#!/usr/bin/env bash

set -eu
set -o pipefail

: ${DOTFILES_PATH:="$HOME/dotfiles"}
: ${DOTFILES_BRANCH:=master}

clone_or_update_repo() {
  local git_dir="$DOTFILES_PATH/.git"

  if [ -d "$git_dir" ]; then
    echo 'Updating repo...'

    if [ "$(git --git-dir="$git_dir" symbolic-ref --short HEAD 2> /dev/null)" != "master" ]; then
      echo 'skip (working on a non-master branch)'
      return
    fi

    if ! git --git-dir="$git_dir" diff --no-ext-diff --quiet --exit-code > /dev/null 2>&1; then
      echo 'skip (unstaged changes present)'
      return
    fi

    if ! git --git-dir="$git_dir" diff-index --cached --quiet HEAD -- > /dev/null 2>&1; then
      echo 'skip (uncommitted changes present)'
      return
    fi

    git --git-dir="$git_dir" pull origin master
    echo 'done'
  elif ! [ -d "$DOTFILES_PATH" ]; then
    echo 'Cloning repo...'
    git clone https://github.com/yamadayuki/dotfiles.git --branch $DOTFILES_BRANCH $DOTFILES_PATH
    echo 'done'
  fi
}

install_homebrew() {
  command -v 'brew' > /dev/null 2>&1 && return

  echo 'Installing homebrew...'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo 'done'
}

install_fish() {
  command -v 'fish' > /dev/null 2>&1 && return

  echo 'Installing fish...'
  brew install fish
  echo 'done'
}

execute_installer() {
  local install_script_path="$DOTFILES_PATH/install.fish"

  if ! [ -d "$install_script_path" ]; then
    echo 'Setup with fish...'
    fish "$install_script_path"
    echo 'done'
  fi
}

main() {
  clone_or_update_repo
  install_homebrew
  install_fish
  execute_installer
}

main
